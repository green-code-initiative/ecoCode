:!sectids:

== Why is this an issue?

This operation requires a significant amount of computational power. Using a single match saves CPU cycles and RAM consumption.

== How to fix it
=== Noncompliant code example

[source,java]
----
public class AvoidRegexPatternNotStatic {
    public boolean foo() {
        final Pattern pattern = Pattern.compile("foo"); // Noncompliant
        return pattern.matcher("foo").find();
    }
}
----

=== Compliant solution

[source,java]
----
public class ValidRegexPattern {
    private static final Pattern pattern = Pattern.compile("foo"); // Compliant

    public boolean foo() {
        return pattern.matcher("foo").find();
    }
}
----

or

[source,java]
----
public class ValidRegexPattern2 {
    private final Pattern pattern = Pattern.compile("foo"); // Compliant

    public boolean foo() {
        return pattern.matcher("foo").find();
    }
}
----

or

[source,java]
----
public class ValidRegexPattern3 {
    private final Pattern pattern;

    public ValidRegexPattern3() {
        pattern = Pattern.compile("foo"); // Compliant
    }

    public boolean foo() {
        return pattern.matcher("foo").find();
    }
}
----

== Resources

- See also https://rules.sonarsource.com/java/tag/performance/RSPEC-4248/[RSPEC-4248 rule]
